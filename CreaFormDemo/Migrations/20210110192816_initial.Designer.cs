// <auto-generated />
using System;
using CreaFormDemo.Entitys;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CreaFormDemo.Migrations
{
    [DbContext(typeof(CreaFormDBcontext))]
    [Migration("20210110192816_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("CreaFormDemo.Entitys.Clientprofile.ClientMedicine", b =>
                {
                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<int>("MedicineID")
                        .HasColumnType("int");

                    b.HasKey("ClientID", "MedicineID");

                    b.HasIndex("MedicineID");

                    b.ToTable("clientMedicines");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.Clientprofile.Medicine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CauseOfMedication")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("anledning till medicineringen");

                    b.Property<string>("MedicinName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Läkemedel");

                    b.HasKey("ID");

                    b.ToTable("Läkemedel");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.Clientprofile.clientProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ålder");

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<string>("Diagnoser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DofB")
                        .HasColumnType("datetime2")
                        .HasColumnName("Föddelsedatum");

                    b.Property<bool>("Eliteathletes")
                        .HasColumnType("bit")
                        .HasColumnName("Elitidrottare ");

                    b.Property<int>("Hip")
                        .HasColumnType("int")
                        .HasColumnName("Höftmått");

                    b.Property<int>("Length")
                        .HasColumnType("int")
                        .HasColumnName("Längd");

                    b.Property<string>("OtherInformation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Övriga upplysningar ");

                    b.Property<string>("PositionWork")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Befattning/arbete");

                    b.Property<bool>("Pregnant")
                        .HasColumnType("bit")
                        .HasColumnName("Gravid ");

                    b.Property<string>("Supplements")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Kosttillskott ");

                    b.Property<bool>("Vegetarian")
                        .HasColumnType("bit");

                    b.Property<int>("Waist")
                        .HasColumnType("int")
                        .HasColumnName("Midjemått");

                    b.Property<double>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("Vikt/kg");

                    b.Property<int>("gender")
                        .HasColumnType("int")
                        .HasColumnName("Kön");

                    b.HasKey("ID");

                    b.HasIndex("ClientID")
                        .IsUnique();

                    b.ToTable("Allmänt");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.IdentityEntity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.HabitsCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("kategoris Namn");

                    b.Property<int>("LifestyleAreaID")
                        .HasColumnType("int")
                        .HasColumnName("Livs stil område");

                    b.HasKey("ID");

                    b.HasIndex("LifestyleAreaID")
                        .IsUnique();

                    b.ToTable("Vanors kategori");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.HabitsChoise", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Amendment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rättelse");

                    b.Property<string>("ChoiseText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Alternativ text");

                    b.Property<int>("GoalVitalitPlanNum")
                        .HasColumnType("int")
                        .HasColumnName("Nr målsättn vitalit.plan");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int")
                        .HasColumnName("Fråga ID");

                    b.Property<bool>("Stress")
                        .HasColumnType("bit");

                    b.Property<string>("SuboptimalDegree")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("Subopt");

                    b.Property<double>("Value")
                        .HasColumnType("float")
                        .HasColumnName("Poäng");

                    b.Property<int>("plusMinusGroupID")
                        .HasColumnType("int")
                        .HasColumnName("Plus-minus grupp");

                    b.Property<int>("plusMinusUnderGroupID")
                        .HasColumnType("int")
                        .HasColumnName("Undergrupp");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("plusMinusGroupID");

                    b.HasIndex("plusMinusUnderGroupID");

                    b.ToTable("Vanors alternativ");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.HabitsQuestion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryID")
                        .HasColumnType("int")
                        .HasColumnName("kategori ID");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Fråge text");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Vanors Frågor");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.LifestyleArea", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("ID");

                    b.ToTable("Livs stil område");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.PlusMinusGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("GruppName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName(" Grupp namn");

                    b.HasKey("ID");

                    b.ToTable("Plus minus grupp");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.PlusMinusUnderGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName(" under grupp");

                    b.Property<int>("PlusMinusGroupID")
                        .HasColumnType("int")
                        .HasColumnName(" Plus minus grupp ID");

                    b.HasKey("ID");

                    b.HasIndex("PlusMinusGroupID");

                    b.ToTable("Plus minus under grupp");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.ProgramPlan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Berries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirdLeanFishShellFish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Coffee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CookFromScratch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DairyProducts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DarkGreenLeafyVegetables")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestructiveCooking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Egg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FastFoodReadyMealsSemiFinishedProducts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatFish1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatFish2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatsOils1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatsOils2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodAsMedicine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fruit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GentleCooking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Herbs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Legumes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MealHabits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutsAlmondsSeedsNatural")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalActivity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessedMeat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgramNumber")
                        .HasColumnType("int");

                    b.Property<string>("RecoveryStress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedMeat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefinedGrain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RootVegetablesSome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stimulants")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SweetDrinks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SweetsSugaryFoods")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Variation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Variousips")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VegetablesOver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Water")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WholeGrains")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("programPlans");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.ProgramsChoise", b =>
                {
                    b.Property<int>("ChoiseID")
                        .HasColumnType("int")
                        .HasColumnName("Alternativ ID");

                    b.Property<int>("ProgramPlanID")
                        .HasColumnType("int")
                        .HasColumnName("Program ID");

                    b.HasKey("ChoiseID", "ProgramPlanID");

                    b.HasIndex("ProgramPlanID");

                    b.ToTable("Program-Alternativ");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Privat.PrivatCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Kategori namn");

                    b.Property<int>("LifestylAreaID")
                        .HasColumnType("int")
                        .HasColumnName("Livs stil område");

                    b.HasKey("ID");

                    b.HasIndex("LifestylAreaID")
                        .IsUnique();

                    b.ToTable("Privat kategori");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Privat.PrivatChoise", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ChoiseText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName(" Alternativ text");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<int>("StrengthLackGroupID")
                        .HasColumnType("int")
                        .HasColumnName(" Styrka/Brist grupp ID");

                    b.Property<int>("StrengthLackUnderGroupID")
                        .HasColumnType("int")
                        .HasColumnName(" Styrka/Brist under grupp ID");

                    b.Property<bool>("Stress")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float")
                        .HasColumnName(" Poäng");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("StrengthLackGroupID");

                    b.HasIndex("StrengthLackUnderGroupID");

                    b.ToTable("Privat Alternativ");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Privat.PrivatQuestion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryID")
                        .HasColumnType("int")
                        .HasColumnName("kategori ID");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Fråge text");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Privat Frågor");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Privat.StrengthLackGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("GruppName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName(" Grupp namn");

                    b.HasKey("ID");

                    b.ToTable("Styrka-Brist Grupp");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Privat.StrengthLackUnderGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Beskrivning");

                    b.Property<int>("StrengthLackGroupID")
                        .HasColumnType("int")
                        .HasColumnName("Styrka-Brist Grupp ID");

                    b.HasKey("ID");

                    b.HasIndex("StrengthLackGroupID");

                    b.ToTable("Styrka-Brist under Grupp");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.job.JobCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Kategori Namn");

                    b.Property<int>("LifestylAreaID")
                        .HasColumnType("int")
                        .HasColumnName("Livs stil område");

                    b.HasKey("ID");

                    b.HasIndex("LifestylAreaID")
                        .IsUnique();

                    b.ToTable("Arbete Kategori");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.job.JobChoise", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ChoiseText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName(" Alternativ text");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int")
                        .HasColumnName("Fråge ID");

                    b.Property<int>("StrengthLackGroupID")
                        .HasColumnType("int")
                        .HasColumnName("Styrka/Brist ID");

                    b.Property<int>("StrengthLackUnderGroupID")
                        .HasColumnType("int")
                        .HasColumnName("Styrka/Brist under grupp ID");

                    b.Property<bool>("Stress")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float")
                        .HasColumnName("Poäng");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("StrengthLackGroupID");

                    b.HasIndex("StrengthLackUnderGroupID");

                    b.ToTable("Arbete Svaror");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.job.JobQuestion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryID")
                        .HasColumnType("int")
                        .HasColumnName("Kategori ID");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Fråge text");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Arbete frågor");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.Users.Advisor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Addres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Förnamn");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Efternamn");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Rådgivare");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.Users.Client", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdvisorID")
                        .HasColumnType("int")
                        .HasColumnName("Rådgivare ID");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Förnamn");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Efternamn");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<bool>("isCompany")
                        .HasColumnType("bit")
                        .HasColumnName("Är företagskonto");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AdvisorID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Klient");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserIdThatCreatedit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.Clientprofile.ClientMedicine", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.Users.Client", "client")
                        .WithMany("clientMedicines")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreaFormDemo.Entitys.Clientprofile.Medicine", "medicine")
                        .WithMany("clientMedicines")
                        .HasForeignKey("MedicineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");

                    b.Navigation("medicine");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.Clientprofile.clientProfile", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.Users.Client", "client")
                        .WithOne("clientProfile")
                        .HasForeignKey("CreaFormDemo.Entitys.Clientprofile.clientProfile", "ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.HabitsCategory", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Habits.LifestyleArea", "lifestyleArea")
                        .WithOne("habitscategory")
                        .HasForeignKey("CreaFormDemo.Entitys.LifestyleModel.Habits.HabitsCategory", "LifestyleAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lifestyleArea");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.HabitsChoise", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Habits.HabitsQuestion", "question")
                        .WithMany("habitschois")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Habits.PlusMinusGroup", "plusMinusGroup")
                        .WithMany("habitsChoise")
                        .HasForeignKey("plusMinusGroupID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Habits.PlusMinusUnderGroup", "plusMinusUnderGroup")
                        .WithMany("habitsChoises")
                        .HasForeignKey("plusMinusUnderGroupID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("plusMinusGroup");

                    b.Navigation("plusMinusUnderGroup");

                    b.Navigation("question");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.HabitsQuestion", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Habits.HabitsCategory", "habitsCategory")
                        .WithMany("habitsQuestions")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("habitsCategory");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.PlusMinusUnderGroup", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Habits.PlusMinusGroup", "plusMinusGroup")
                        .WithMany("plusMinusUnderGroups")
                        .HasForeignKey("PlusMinusGroupID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("plusMinusGroup");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.ProgramsChoise", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Habits.HabitsChoise", "choise")
                        .WithMany("programsChoises")
                        .HasForeignKey("ChoiseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Habits.ProgramPlan", "program")
                        .WithMany("programsChoises")
                        .HasForeignKey("ProgramPlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("choise");

                    b.Navigation("program");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Privat.PrivatCategory", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Habits.LifestyleArea", "lifestyleArea")
                        .WithOne("privatcategory")
                        .HasForeignKey("CreaFormDemo.Entitys.LifestyleModel.Privat.PrivatCategory", "LifestylAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lifestyleArea");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Privat.PrivatChoise", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Privat.PrivatQuestion", "question")
                        .WithMany("privatchoises")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Privat.StrengthLackGroup", "strengthLackGroup")
                        .WithMany("PrivatChoises")
                        .HasForeignKey("StrengthLackGroupID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Privat.StrengthLackUnderGroup", "strengthLackUnderGroup")
                        .WithMany("privatChoises")
                        .HasForeignKey("StrengthLackUnderGroupID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("question");

                    b.Navigation("strengthLackGroup");

                    b.Navigation("strengthLackUnderGroup");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Privat.PrivatQuestion", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Privat.PrivatCategory", "privatCategory")
                        .WithMany("privatQuestions")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("privatCategory");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Privat.StrengthLackUnderGroup", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Privat.StrengthLackGroup", "strengthLackGroup")
                        .WithMany("strengthLackUnderGroups")
                        .HasForeignKey("StrengthLackGroupID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("strengthLackGroup");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.job.JobCategory", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Habits.LifestyleArea", "lifestyleArea")
                        .WithOne("jobcategory")
                        .HasForeignKey("CreaFormDemo.Entitys.LifestyleModel.job.JobCategory", "LifestylAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lifestyleArea");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.job.JobChoise", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.job.JobQuestion", "jobQuestion")
                        .WithMany("jobchoises")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Privat.StrengthLackGroup", "strengthLackGroup")
                        .WithMany("jobChoises")
                        .HasForeignKey("StrengthLackGroupID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.Privat.StrengthLackUnderGroup", "strengthLackUnderGroup")
                        .WithMany("jobChoises")
                        .HasForeignKey("StrengthLackUnderGroupID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("jobQuestion");

                    b.Navigation("strengthLackGroup");

                    b.Navigation("strengthLackUnderGroup");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.job.JobQuestion", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.LifestyleModel.job.JobCategory", "JobCategory")
                        .WithMany("jobQuestions")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("JobCategory");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.Users.Advisor", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.Users.User", "user")
                        .WithOne("advisor")
                        .HasForeignKey("CreaFormDemo.Entitys.Users.Advisor", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.Users.Client", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.Users.Advisor", "advisor")
                        .WithMany("clients")
                        .HasForeignKey("AdvisorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CreaFormDemo.Entitys.Users.User", "user")
                        .WithOne("client")
                        .HasForeignKey("CreaFormDemo.Entitys.Users.Client", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("advisor");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.IdentityEntity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.IdentityEntity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreaFormDemo.Entitys.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CreaFormDemo.Entitys.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.Clientprofile.Medicine", b =>
                {
                    b.Navigation("clientMedicines");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.HabitsCategory", b =>
                {
                    b.Navigation("habitsQuestions");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.HabitsChoise", b =>
                {
                    b.Navigation("programsChoises");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.HabitsQuestion", b =>
                {
                    b.Navigation("habitschois");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.LifestyleArea", b =>
                {
                    b.Navigation("habitscategory");

                    b.Navigation("jobcategory");

                    b.Navigation("privatcategory");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.PlusMinusGroup", b =>
                {
                    b.Navigation("habitsChoise");

                    b.Navigation("plusMinusUnderGroups");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.PlusMinusUnderGroup", b =>
                {
                    b.Navigation("habitsChoises");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Habits.ProgramPlan", b =>
                {
                    b.Navigation("programsChoises");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Privat.PrivatCategory", b =>
                {
                    b.Navigation("privatQuestions");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Privat.PrivatQuestion", b =>
                {
                    b.Navigation("privatchoises");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Privat.StrengthLackGroup", b =>
                {
                    b.Navigation("jobChoises");

                    b.Navigation("PrivatChoises");

                    b.Navigation("strengthLackUnderGroups");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.Privat.StrengthLackUnderGroup", b =>
                {
                    b.Navigation("jobChoises");

                    b.Navigation("privatChoises");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.job.JobCategory", b =>
                {
                    b.Navigation("jobQuestions");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.LifestyleModel.job.JobQuestion", b =>
                {
                    b.Navigation("jobchoises");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.Users.Advisor", b =>
                {
                    b.Navigation("clients");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.Users.Client", b =>
                {
                    b.Navigation("clientMedicines");

                    b.Navigation("clientProfile");
                });

            modelBuilder.Entity("CreaFormDemo.Entitys.Users.User", b =>
                {
                    b.Navigation("advisor");

                    b.Navigation("client");
                });
#pragma warning restore 612, 618
        }
    }
}
